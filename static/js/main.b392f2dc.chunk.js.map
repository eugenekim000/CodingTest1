{"version":3,"sources":["Components/autoComplete.js","Components/autoComplete1.js","Components/autoComplete2.js","App.js","serviceWorker.js","index.js"],"names":["AutoComplete","useState","input","setInput","result","setResult","a","fetch","then","data","json","results","predictions","map","name","description","id","useEffect","getPredictions","catch","error","console","log","className","onChange","e","target","value","list","suggestions","key","AutoComplete1","AutoComplete2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b392f2dc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../App.css';\n\nfunction AutoComplete() {\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState([]);\n\n  useEffect(() => {\n    getPredictions(input).catch(error => {\n      setResult([]);\n    });\n  }, [input]);\n\n  async function getPredictions(input) {\n    await fetch('https://coding-challenge.echoandapex.com/locations?q=' + input)\n      .then(data => data.json())\n      .then(results =>\n        results.predictions.map(({ name, description, id }) => {\n          return { name, description, id };\n        })\n      )\n      .then(result => setResult(result));\n  }\n  console.log(result);\n\n  return (\n    <div className='auto-complete-container'>\n      <input\n        className='user-input'\n        onChange={e => setInput(e.target.value)}\n        list='auto-complete'\n        id='auto-complete-choice'\n      />\n      <datalist id='auto-complete'>\n        {result.map(suggestions => {\n          return <option key={suggestions.id} value={suggestions.name} />;\n        })}\n      </datalist>\n\n      {result == '' ? (\n        <div>\n          <h1 className='no-results'>No Results</h1>\n        </div>\n      ) : (\n        <div className='suggestion-container'>\n          {result.map(data => {\n            return (\n              <div className='suggestion-description'>{data.description}</div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AutoComplete;\n","import React, { useEffect, useState } from 'react';\nimport '../App.css';\n\nfunction AutoComplete1() {\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState([]);\n\n  useEffect(() => {\n    getPredictions(input).catch(error => {\n      setResult([]);\n    });\n  }, [input]);\n\n  async function getPredictions(input) {\n    await fetch('https://coding-challenge.echoandapex.com/locations?q=' + input)\n      .then(data => data.json())\n      .then(results =>\n        results.predictions.map(({ name, description, id }) => {\n          return { name, description, id };\n        })\n      )\n      .then(result => setResult(result));\n  }\n  console.log(result);\n\n  return (\n    <div className='auto-complete-container1'>\n      <input\n        className='user-input1'\n        onChange={e => setInput(e.target.value)}\n        list='auto-complete'\n        id='auto-complete-choice'\n      />\n      <datalist id='auto-complete'>\n        {result.map(suggestions => {\n          return <option key={suggestions.id} value={suggestions.name} />;\n        })}\n      </datalist>\n\n      {result == '' ? (\n        <div>\n          <h1 className='no-results1'>No Results</h1>\n        </div>\n      ) : (\n        <div className='suggestion-container1'>\n          {result.map(data => {\n            return (\n              <div className='suggestion-description1'>{data.description}</div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AutoComplete1;\n","import React, { useEffect, useState } from 'react';\nimport '../App.css';\n\nfunction AutoComplete2() {\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState([]);\n\n  useEffect(() => {\n    getPredictions(input).catch(error => {\n      setResult([]);\n    });\n  }, [input]);\n\n  async function getPredictions(input) {\n    await fetch('https://coding-challenge.echoandapex.com/locations?q=' + input)\n      .then(data => data.json())\n      .then(results =>\n        results.predictions.map(({ name, description, id }) => {\n          return { name, description, id };\n        })\n      )\n      .then(result => setResult(result));\n  }\n  console.log(result);\n\n  return (\n    <div className='auto-complete-container2'>\n      <input\n        className='user-input2'\n        onChange={e => setInput(e.target.value)}\n        list='auto-complete'\n        id='auto-complete-choice'\n      />\n      <datalist id='auto-complete'>\n        {result.map(suggestions => {\n          return <option key={suggestions.id} value={suggestions.name} />;\n        })}\n      </datalist>\n\n      {result == '' ? (\n        <div>\n          <h1 className='no-results2'>No Results</h1>\n        </div>\n      ) : (\n        <div className='suggestion-container'>\n          {result.map(data => {\n            return (\n              <div className='suggestion-description2'>{data.description}</div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AutoComplete2;\n","import React from 'react';\nimport './App.css';\nimport AutoComplete from './Components/autoComplete.js';\nimport AutoComplete1 from './Components/autoComplete1';\nimport AutoComplete2 from './Components/autoComplete2.js';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <AutoComplete />\n      <br />\n      <AutoComplete1 />\n      <br />\n      <AutoComplete2 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}